def bindec(binary):
    decimal = 0
    sbin = str(binary)
    lbin = len(sbin)
    for x in range(lbin):
        last = sbin[(lbin-(x+1))]
        decimal += int(last)*(2**x)
    return(decimal)

def decbin(decimal):
    binary = 0
    count = 0
    while decimal > 0:
        conv = decimal%2
        decimal = decimal//2
        binary += conv * (10**count)
        count += 1
    return(binary)
    
def binadd(bin1, bin2):
    print(decbin(bindec(bin1) + bindec(bin2)))


def hexdec(hex):
    decimal = 0
    shex = str(hex)
    lhex = len(shex)
    for x in range(lhex):
        last = shex[(lhex-(x+1))]
        dlast = hexabet(last)
        decimal += int(dlast)*(16**x)
    return(decimal)

def dechex(decimal):
    hex = []
    count = 0
    while decimal > 0:
        conv = decimal%16
        decimal = decimal//16
        if conv > 9:
            conv=hexabet(conv)
        conv = str(conv)
        hex.extend(conv)
        count += 1
    hex.reverse()
    return hex

def hexabet(hex):
    hex = str(hex)
    if hex == 'a' or hex == 'A':
        return 10
    elif hex == 'b' or hex == 'B':
        return 11
    elif hex == 'c' or hex == 'C':
        return 12
    elif hex == 'd' or hex == 'D':
        return 13
    elif hex == 'e' or hex == 'E':
        return 14
    elif hex == 'f' or hex == 'F':
        return 15
    elif hex.isalpha() == True:
        return 0
    else:
        hex = int(hex)
        if hex == 10:
            return 'A'
        elif hex == 11:
            return 'B'
        elif hex == 12:
            return 'C'
        elif hex == 13:
            return 'D'
        elif hex == 14:
            return 'E'
        elif hex == 15:
            return 'F'
        else:
            return hex

def binhex(bin):
    conv = bindec(bin)
    conv = dechex(conv)
    print (''.join(map(str, conv)))

def hexbin(hex):
    conv = hexdec(hex)
    conv = decbin(conv)
    print(conv)

binadd(1011,1011)
binhex(101011000011)
hexbin('ac3')
